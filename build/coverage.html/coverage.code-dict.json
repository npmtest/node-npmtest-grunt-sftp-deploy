{"/home/travis/build/npmtest/node-npmtest-grunt-sftp-deploy/test.js":"/* istanbul instrument in package npmtest_grunt_sftp_deploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-sftp-deploy/lib.npmtest_grunt_sftp_deploy.js":"/* istanbul instrument in package npmtest_grunt_sftp_deploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_sftp_deploy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_sftp_deploy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-sftp-deploy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-sftp-deploy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_sftp_deploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_sftp_deploy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_sftp_deploy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_sftp_deploy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_sftp_deploy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_sftp_deploy.__dirname + '/lib.npmtest_grunt_sftp_deploy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-sftp-deploy/node_modules/grunt-sftp-deploy/tasks/sftp-deploy.js":"//\n// Grunt Task File\n// ---------------\n//\n// Task: SFTP Deploy\n// Description: Deploy code over SFTP\n// Dependencies: ssh2\n//\n\nmodule.exports = function(grunt) {\n\n  grunt.util = grunt.util || grunt.utils;\n\n  var async = grunt.util.async;\n  var log = grunt.log;\n  var _ = grunt.util._;\n  var file = grunt.file;\n  var fs = require('fs');\n  var path = require('path');\n  var util = require('util');\n  var SSHConnection = require('ssh2');\n  var progress = require('progress');\n\n  var toTransfer;\n  var sftpConn;\n  var sshConn;\n  var localRoot;\n  var remoteRoot;\n  var remoteSep;\n  var localSep = '/';\n  var authVals;\n  var exclusions;\n  var progressLogger;\n  var transferred = 0;\n  var with_progress = true;\n\n  var cache;\n  var cacheEnabled;\n  var cacheFileName;\n\n  // A method for parsing the source location and storing the information into a suitably formated object\n  function dirParseSync(startDir, result) {\n    var files;\n    var i;\n    var tmpPath;\n    var currFile;\n\n    // initialize the `result` object if it is the first iteration\n    if (result === undefined) {\n      result = {};\n      result[localSep] = [];\n    }\n\n    // check if `startDir` is a valid location\n    if (!fs.existsSync(startDir)) {\n      grunt.warn(startDir + ' is not an existing location');\n    }\n\n    // iterate throught the contents of the `startDir` location of the current iteration\n    files = fs.readdirSync(startDir);\n    for (i = 0; i < files.length; i++) {\n      currFile = startDir + localSep + files[i];\n      if (!file.isMatch({matchBase: true}, exclusions, currFile)) {\n        if (file.isDir(currFile)) {\n          tmpPath = path.relative(localRoot, startDir + localSep + files[i]);\n          if (!_.has(result, tmpPath)) {\n            result[tmpPath] = [];\n          }\n          dirParseSync(currFile, result);\n        } else {\n          tmpPath = path.relative(localRoot, startDir);\n          if (!tmpPath.length) {\n            tmpPath = localSep;\n          }\n          result[tmpPath].push(files[i]);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  // A method for uploading a single file\n  function sftpPut(inFilename, cb) {\n    var fromFile, toFile, from, to;\n\n    fromFile = localRoot + localSep + inFilename;\n    toFile = remoteRoot + remoteSep + inFilename.split(localSep).join(remoteSep);\n\n    if(localSep != remoteSep) {\n      toFile = toFile.replace(new RegExp(localSep == '\\\\' ? '\\\\\\\\' : '\\\\/', 'g'), remoteSep);\n    }\n\n    grunt.verbose.write(fromFile + ' to ' + toFile);\n\n    var f_size = fs.statSync(fromFile).size;\n\n    var upload = function(fromFile, toFile, cb) {\n      sftpConn.fastPut( fromFile, toFile, function(err){\n        if (err){\n          log.write((' Error uploading file: ' + err.message).red + '\\n');\n          cb(err);\n        } else {\n          grunt.verbose.write(' done'.green + '\\n' );\n          if( with_progress ) progressLogger.tick();\n          transferred += parseInt(f_size/1024);\n          cb(null);\n        }\n      });\n    };\n\n    if (cacheEnabled) {\n      fs.stat(fromFile, function(err, fromFileData){\n        if (cache[fromFile] && +new Date(cache[fromFile]) >= +new Date(fromFileData.mtime)) {\n          cb(null);\n        } else {\n          cache[fromFile] = fromFileData.mtime;\n          upload(fromFile, toFile, cb);\n        }\n      } );\n    } else {\n      upload(fromFile, toFile, cb);\n    }\n\n  }\n\n  // A method that processes a location - changes to a folder and uploads all respective files\n  function sftpProcessDirectories (inPath, cb) {\n    if (!toTransfer[inPath]) {\n      cb(new Error('Data for ' + inPath + ' not found'));\n    }\n    var remoteInPath;\n\n    if(inPath.indexOf(localSep) !== -1){\n      remoteInPath = inPath.split(localSep).join(remoteSep);\n    }else{\n      remoteInPath = inPath;\n    }\n\n    var remotePath = remoteRoot + (remoteInPath == remoteSep ?\n      remoteInPath :\n      remoteSep + remoteInPath);\n\n    sftpConn.mkdir(remotePath, {mode: 0755}, function(err) {\n      grunt.verbose.writeln('mkdir ' + remotePath, err ? 'error or dir exists' : 'ok');\n      if( with_progress ) progressLogger.tick();\n      cb(null);\n    });\n  }\n\n  function getAuthByKey(inKey) {\n    if (inKey !== null) {\n\n      if (typeof inKey == 'object') {\n        return inKey;\n\n      } else if (process.env[inKey]) {\n        return JSON.parse(process.env[inKey]);\n\n      } else if (fs.existsSync(inKey)) {\n        return JSON.parse(grunt.file.read(inKey)) || null;\n\n      } else if (fs.existsSync('.ftppass')) {\n        return JSON.parse(grunt.file.read('.ftppass'))[inKey] || null;\n      }\n\n    } else return null;\n  }\n\n  function getKeyLocation(customKey) {\n    var keyLocation = null;\n    var defaultKeys = [\n      process.env.HOME + '/.ssh/id_dsa',\n      process.env.HOME + '/.ssh/id_rsa'\n    ];\n\n    if (customKey) {\n      if (fs.existsSync(customKey)) {\n        keyLocation = customKey;\n      } else if (fs.existsSync(path.join(process.env.HOME, '.ssh', customKey))) {\n        keyLocation = path.join(process.env.HOME, '.ssh', customKey);\n      }\n    } else {\n      for (var i = 0; i < defaultKeys.length; i++) {\n        if (fs.existsSync(defaultKeys[i])) keyLocation = defaultKeys[i];\n      }\n    }\n\n    if (keyLocation === null) grunt.warn('Could not find private key.');\n    return keyLocation;\n  }\n\n  function getLength(toTransfer){\n    var i = 0;\n    for(var n in toTransfer ){\n      if(!toTransfer[n].substr){\n        i+= getLength(toTransfer[n]);\n      }\n      i++;\n    }\n    return i;\n  }\n  function getFiles(toTransfer){\n    var ret = [];\n    for(var n in toTransfer ){\n      for( var k in toTransfer[n]){\n        ret.push( (n==localSep?\"\":n+localSep)+toTransfer[n][k]);\n      }\n    }\n    return ret;\n  }\n\n\n  // The main grunt task\n  grunt.registerMultiTask('sftp-deploy', 'Deploy code over SFTP', function() {\n    var done = this.async();\n    var keyLocation,connection,agentSocket;\n\n    cacheEnabled = !!this.data.cache;\n    cacheFileName = this.data.cache;\n\n    if (cacheEnabled) {\n      if (fs.existsSync(cacheFileName)) {\n        try{\n          cache = JSON.parse(fs.readFileSync(cacheFileName) || {});\n        } catch(e) {\n          cache = {};\n        }\n      } else {\n        fs.writeFileSync(cacheFileName, '{}');\n        cache = {};\n      }\n    }\n\n    // Init\n    sshConn = new SSHConnection();\n\n    transferred = 0;\n    localRoot = Array.isArray(this.data.src) ? this.data.src[0] : this.data.src;\n    remoteRoot = Array.isArray(this.data.dest) ? this.data.dest[0] : this.data.dest;\n    remoteSep = this.data.serverSep ? this.data.serverSep : \"/\";\n    localSep = this.data.localSep ? this.data.localSep : \"/\";\n    var concurrency = parseInt(this.data.concurrency) || 4;\n    with_progress = this.data.progress || !grunt.option(\"verbose\");\n\n    authVals = getAuthByKey(this.data.auth.authKey);\n    exclusions = this.data.exclusions || [];\n\n    toTransfer = dirParseSync(localRoot);\n    progressLogger = new progress('  transferred=[:current/:total] elapsed=[:elapseds] overall=[:percent] eta=[:etas] [:bar]', {\n      complete: '=',\n      incomplete: ' ',\n      width: 40,\n      total: getLength(toTransfer)\n    });\n\n    connection = {\n      host: this.data.auth.host,\n      port: this.data.auth.port\n    };\n\n    // Use either password or key-based login\n    if (typeof authVals === 'undefined' || authVals === null) {\n      grunt.warn('.ftppass seems to be missing or incomplete');\n    } else {\n      connection.username = authVals.username;\n      if (authVals.agent === true) {\n        agentSocket = process.env.SSH_AUTH_SOCK;\n        if (agentSocket === undefined) {\n          log.warn('Could not get the ssh-agent socket. Is the SSH_AUTH_SOCK enviroment variable set?');\n        } else {\n          connection.agent = agentSocket;\n          log.ok('Logging in with ssh-agent-based authentication');\n        }\n      } else if (typeof authVals.agent === 'string') {\n        connection.agent = authVals.agent;\n        log.ok('Logging in with SSH agent \"' + connection.agent + '\"');\n      } else if (authVals.password === undefined) {\n        keyLocation = getKeyLocation(authVals.keyLocation);\n        connection.privateKey = fs.readFileSync(keyLocation);\n        if (authVals.passphrase) connection.passphrase = authVals.passphrase;\n        log.ok('Logging in with key at ' + keyLocation);\n      } else {\n        connection.password = authVals.password;\n        log.ok('Logging in with username ' + authVals.username);\n      }\n    }\n\n    var has_transferred_all_files = false;\n    var already_done = false;\n    var done_handler = function(err){\n      if( already_done ) return;\n      already_done = true;\n      sshConn.end();\n      if (cacheEnabled) {\n        fs.writeFileSync(cacheFileName, JSON.stringify(cache) || {});\n      }\n      grunt.log.ok(\"Transferred : \"+(transferred/1024)+\" Mb\" );\n      if(!has_transferred_all_files || err){\n        grunt.log.writeln(err);\n        grunt.fail.fatal('Transfer did not succeeded');\n      }\n      done();\n    };\n\n    log.ok('Concurrency : ' + concurrency);\n    sshConn.connect(connection);\n\n    sshConn.on('connect', function () {\n      grunt.verbose.writeln('Connection :: connect');\n    });\n    sshConn.on('error', function (e) {\n      grunt.log.error(e);\n      grunt.fail.fatal('Connection :: error');\n      done_handler();\n    });\n    sshConn.on('end', function (e) {\n      grunt.verbose.writeln('Connection :: end', e);\n      done_handler();\n    });\n    sshConn.on('close', function (e) {\n      grunt.verbose.writeln('Connection :: close', e);\n      done_handler();\n    });\n\n    sshConn.on('ready', function () {\n      // console.log('Connection :: ready');\n\n      sshConn.sftp(function (err, sftp) {\n        if (err) throw err;\n\n        sftpConn = sftp;\n\n        sftp.on('end', function (e) {\n          grunt.verbose.writeln('SFTP :: SFTP session closed',e);\n          done_handler();\n        });\n        sftp.on('close', function (e) {\n          grunt.verbose.writeln('SFTP :: close',e);\n        });\n        sftp.on('error', function (e) {\n          grunt.log.error(e);\n          grunt.fail.fatal('SFTP :: error');\n          done_handler();\n        });\n        sftp.on('open', function () {\n          grunt.verbose.writeln('SFTP :: open');\n        });\n\n        var locations = _.keys(toTransfer);\n        // console.dir(locations);\n\n        sftp.mkdir(remoteRoot, {mode: 0755}, function(err) {\n          // ignore err to not block if dir already exists\n          // if( err ) return done_handler(err);\n\n          // Iterating through all location from the `localRoot` in parallel\n          async.forEachSeries(locations, sftpProcessDirectories, function(err) {\n            grunt.verbose.writeln(' ');\n            log.ok('Directories done.');\n            has_transferred_all_files = false;\n\n            if( err ) done_handler(err);\n\n            // Iterating through all location from the `localRoot` in parallel\n            async.forEachLimit(getFiles(toTransfer), concurrency, sftpPut, function (err) {\n              // console.log('callback');\n              has_transferred_all_files = true;\n              done_handler(err);\n            });\n          });\n        });\n\n      });\n\n    });\n\n    if (grunt.errors) {\n      return false;\n    }\n  });\n};\n"}